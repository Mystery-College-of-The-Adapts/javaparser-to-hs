/* Part of UML/Dot, a program to generate UML class diagrams from Java source.
 * Copyright (C) 2003 Walter Stroebel
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
package net.sf.umldot.ui;

import java.awt.Dimension;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import javax.swing.*;
import net.sf.umldot.DUDiagram;
import net.sf.umldot.DotFile;
import net.sf.umldot.OutputDiscarder;
import net.sf.umldot.Project;
import net.sf.umldot.util.AutoSaveProperties;

/**
 *
 * @author  walter
 */
public class ShowUMLFrame extends JInternalFrame {
    
    public DUDiagram diagram;
    private ClassEditFrame ceFrame = null;
    
    /** Creates new form ShowUMLFrame */
    public ShowUMLFrame(DUDiagram diagram) {
        super(diagram.getTitle());
        this.diagram = diagram;
        try {
            initComponents();
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroupRatio = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        rankDir = new javax.swing.JCheckBoxMenuItem();
        ratioChoiceMenu = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        optionsMenuItem = new javax.swing.JMenuItem();
        landscapeMenuItem = new javax.swing.JCheckBoxMenuItem();
        printMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        writeDotMenuItem = new javax.swing.JMenuItem();

        jScrollPane1.setViewportView(jLabel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Menu");
        rankDir.setSelected(true);
        rankDir.setText("TopToBottom");
        rankDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankDirActionPerformed(evt);
            }
        });

        jMenu1.add(rankDir);

        ratioChoiceMenu.setText("Ratio");
        jRadioButtonMenuItem1.setText("compress");
        buttonGroupRatio.add(jRadioButtonMenuItem1);
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });

        ratioChoiceMenu.add(jRadioButtonMenuItem1);

        jRadioButtonMenuItem2.setText("fill");
        buttonGroupRatio.add(jRadioButtonMenuItem2);
        jRadioButtonMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem2ActionPerformed(evt);
            }
        });

        ratioChoiceMenu.add(jRadioButtonMenuItem2);

        jRadioButtonMenuItem3.setSelected(true);
        jRadioButtonMenuItem3.setText("default");
        buttonGroupRatio.add(jRadioButtonMenuItem3);
        jRadioButtonMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem3ActionPerformed(evt);
            }
        });

        ratioChoiceMenu.add(jRadioButtonMenuItem3);

        jMenu1.add(ratioChoiceMenu);

        optionsMenuItem.setText("Options/edit");
        optionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(optionsMenuItem);

        landscapeMenuItem.setText("Landscape");
        landscapeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                landscapeMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(landscapeMenuItem);

        printMenuItem.setText("Print");
        printMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(printMenuItem);

        saveMenuItem.setText("Save...");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(saveMenuItem);

        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(openMenuItem);

        writeDotMenuItem.setText("Write Dot file...");
        writeDotMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeDotMenuItemActionPerformed(evt);
            }
        });

        jMenu1.add(writeDotMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents
    
    private void landscapeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_landscapeMenuItemActionPerformed
        optionStateChanged();
    }//GEN-LAST:event_landscapeMenuItemActionPerformed
    
    private void writeDotMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeDotMenuItemActionPerformed
        try {
            JFileChooser jfc = new JFileChooser(Project.getInstance().getLastParent());
            int choice;
            while ((choice = jfc.showSaveDialog(this)) == JFileChooser.APPROVE_OPTION) {
                Project.getInstance().setLastParent(jfc.getSelectedFile().getParentFile());
                if (jfc.getSelectedFile().exists()) {
                    if (JOptionPane.showConfirmDialog(this, "File exists, overwrite?", jfc.getSelectedFile().getAbsolutePath(), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        jfc.getSelectedFile().delete();
                        break;
                    }
                } else {
                    break;
                }
            }
            if (choice == JFileChooser.APPROVE_OPTION) {
                DotFile dF = new DotFile(new PrintStream(new FileOutputStream(jfc.getSelectedFile().getAbsolutePath())));
                dF.setPortrait(!landscapeMenuItem.isSelected());
                dF.setRankDirTB(rankDir.isSelected());
                String rat = "";
                if (this.jRadioButtonMenuItem1.isSelected()) rat = this.jRadioButtonMenuItem1.getText();
                if (this.jRadioButtonMenuItem2.isSelected()) rat = this.jRadioButtonMenuItem2.getText();
                if (rat.length() > 0) {
                    dF.setRatio(rat);
                }
                dF.open();
                diagram.writeToDot(dF);
                dF.close();
                dF.getOut().close();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),"Error while writing Dot file",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_writeDotMenuItemActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        DUDiagram saveThis = diagram;
        try {
            if (ceFrame != null) {
                getDesktopPane().getDesktopManager().closeFrame(ceFrame);
                ceFrame = null;
            }
            diagram = Project.getInstance().openDiagram();
            if (diagram == null) diagram = saveThis;
            makeImage();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),"Error while loading diagram",JOptionPane.ERROR_MESSAGE);
            diagram = saveThis;
        }
        optionsMenuItemActionPerformed(null);
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        JFileChooser jfc = new JFileChooser(Project.getInstance().getLastParent());
        int choice;
        while ((choice = jfc.showSaveDialog(this)) == JFileChooser.APPROVE_OPTION) {
            Project.getInstance().setLastParent(jfc.getSelectedFile().getParentFile());
            if (jfc.getSelectedFile().exists()) {
                if (JOptionPane.showConfirmDialog(this, "File exists, overwrite?", jfc.getSelectedFile().getAbsolutePath(), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    jfc.getSelectedFile().delete();
                    break;
                }
            } else {
                break;
            }
        }
        if (choice == JFileChooser.APPROVE_OPTION)
            diagram.writeToProperties(new AutoSaveProperties(jfc.getSelectedFile().getAbsolutePath()));
    }//GEN-LAST:event_saveMenuItemActionPerformed
    
    private void printMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMenuItemActionPerformed
        File tF;
        try {
            tF = File.createTempFile("tempdot", ".ps");
            tF.deleteOnExit();
            Process p = Runtime.getRuntime().exec("dot -Tps -o" + tF.getAbsolutePath());
            new OutputDiscarder(p.getErrorStream()).start();
            new OutputDiscarder(p.getInputStream()).start();
            
            DotFile dF = new DotFile(new PrintStream(p.getOutputStream()));
            dF.setPortrait(!landscapeMenuItem.isSelected());
            dF.setRankDirTB(rankDir.isSelected());
            String rat = "";
            if (this.jRadioButtonMenuItem1.isSelected()) rat = this.jRadioButtonMenuItem1.getText();
            if (this.jRadioButtonMenuItem2.isSelected()) rat = this.jRadioButtonMenuItem2.getText();
            if (rat.length() > 0) {
                dF.setRatio(rat);
            }
            dF.open();
            diagram.writeToDot(dF);
            dF.close();
            dF.getOut().close();
            p.waitFor();
        } catch (Exception oops) {
            oops.printStackTrace();
            return;
        }
        try {
            Process p = Runtime.getRuntime().exec("lpr " + tF.getAbsolutePath());
            new OutputDiscarder(p.getErrorStream()).start();
            new OutputDiscarder(p.getInputStream()).start();
            p.waitFor();
        } catch (Exception oops) {
            oops.printStackTrace();
            return;
        }
    }//GEN-LAST:event_printMenuItemActionPerformed
    
    private void optionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsMenuItemActionPerformed
        openEditFrame();
    }//GEN-LAST:event_optionsMenuItemActionPerformed
    
    private void jRadioButtonMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem3ActionPerformed
        optionStateChanged();
    }//GEN-LAST:event_jRadioButtonMenuItem3ActionPerformed
    
    private void jRadioButtonMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem2ActionPerformed
        optionStateChanged();
    }//GEN-LAST:event_jRadioButtonMenuItem2ActionPerformed
    
    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        optionStateChanged();
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed
    
    private void rankDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankDirActionPerformed
        optionStateChanged();
    }//GEN-LAST:event_rankDirActionPerformed
    
    public synchronized void makeImage() throws IOException, InterruptedException {
        File tF = File.createTempFile("tempdot", ".gif");
        tF.deleteOnExit();
        
        Process p = Runtime.getRuntime().exec("dot -Tgif -o" + tF.getAbsolutePath());
        new OutputDiscarder(p.getErrorStream()).start();
        new OutputDiscarder(p.getInputStream()).start();
        
        DotFile dF = new DotFile(new PrintStream(p.getOutputStream()));
        dF.grpSize = jScrollPane1.getSize();
        if (landscapeMenuItem.isSelected()) {
            int tmp = dF.grpSize.width;
            dF.grpSize.width = dF.grpSize.height;
            dF.grpSize.height = tmp;
        }
        dF.setPortrait(!landscapeMenuItem.isSelected());
        dF.setRankDirTB(rankDir.isSelected());
        String rat = "";
        if (this.jRadioButtonMenuItem1.isSelected()) rat = this.jRadioButtonMenuItem1.getText();
        if (this.jRadioButtonMenuItem2.isSelected()) rat = this.jRadioButtonMenuItem2.getText();
        if (rat.length() > 0) {
            dF.setRatio(rat);
        }
        dF.open();
        diagram.writeToDot(dF);
        dF.close();
        dF.getOut().close();
        p.waitFor();
        jLabel1.setIcon(new ImageIcon(tF.getAbsolutePath()));
    }
    
    synchronized void optionStateChanged() {
        try {
            makeImage();
        }
        catch (InterruptedException ex) {
        }
        catch (IOException ex) {
        }
    }
    
    public void openEditFrame() {
        if (ceFrame != null) {
            getDesktopPane().getDesktopManager().closeFrame(ceFrame);
        }
        ceFrame = new ClassEditFrame(this);
        ceFrame.setClosable(true);
        ceFrame.setIconifiable(true);
        ceFrame.setMaximizable(true);
        ceFrame.setResizable(true);
        ceFrame.setVisible(true);
        Dimension dim = getDesktopPane().getSize();
        ceFrame.setBounds((dim.width / 2) + 1, 0, dim.width/2,dim.height);
        getDesktopPane().add(ceFrame, JLayeredPane.DEFAULT_LAYER);
        try {
            ceFrame.setSelected(true);
        } catch (Exception ignore) {
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupRatio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBoxMenuItem landscapeMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem optionsMenuItem;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JCheckBoxMenuItem rankDir;
    private javax.swing.JMenu ratioChoiceMenu;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem writeDotMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
