/* Part of UML/Dot, a program to generate UML class diagrams from Java source.
 * Copyright (C) 2003 Walter Stroebel
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
package net.sf.umldot;

import java.awt.Dimension;
import java.io.File;
import java.io.FileWriter;
import javax.swing.*;
import net.sf.umldot.ui.SelectObjectDialog;
import net.sf.umldot.ui.ShowUMLFrame;
import net.sf.umldot.ui.SourceDirectories;
import net.sf.umldot.ui.SourceScannerDialog;
import net.sf.umldot.util.AutoSaveProperties;
import net.sf.umldot.util.PrefixedProperties;
import net.sf.umldot.util.SwingProperties;



/**
 *
 * @author  walter
 */
public class UMLDot
extends JFrame {
    private ShowUMLFrame umlFrame = null;
    private SwingProperties swProp = new SwingProperties(new PrefixedProperties("umldot.main",
    new AutoSaveProperties("umldot.properties")));
    
    /** Creates new form UMLDot */
    public UMLDot() {
        initComponents();
        swProp.restoreLocationAndSize(this);
        if (swProp.getProperty("most.recent.project") != null) {
            try {
                Project.open(swProp.getProperty("most.recent.project"));
                new SourceScannerDialog(this, true).show();
                setTitle(Project.getInstance().propFile.getAbsolutePath());
            } catch (Exception ignore) {
                ignore.printStackTrace();
                swProp.remove("most.recent.project");
                Project.close();
            }
        }
        while (Project.getInstance() == null) {
            int ask = JOptionPane.showConfirmDialog(this, "There is no project currently selected.\n"+
            "Do you want to open an existing project (YES) or create a new project (NO)?");
            switch (ask) {
                case JOptionPane.YES_OPTION:
                    openMenuItemActionPerformed(null);
                    break;
                case JOptionPane.NO_OPTION:
                    try {
                        JFileChooser fc = new JFileChooser();
                        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                            FileWriter fw = new FileWriter(fc.getSelectedFile());
                            fw.close();
                            Project.open(fc.getSelectedFile().getAbsolutePath());
                            new SourceScannerDialog(this, true).show();
                            setTitle(Project.getInstance().propFile.getAbsolutePath());
                        }
                    } catch (Exception ignore) {
                        ignore.printStackTrace();
                        swProp.remove("most.recent.project");
                        Project.close();
                    }
                    break;
                default:
                    System.exit(0);
                    break;
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        sourceMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        diagramMenu = new javax.swing.JMenu();
        newDiagram = new javax.swing.JMenuItem();
        openDiagram = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        desktopPane.setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        fileMenu.setToolTipText("Open a project file and/or set the source paths.");
        openMenuItem.setText("Open");
        openMenuItem.setToolTipText("Open or create a project file.");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        sourceMenuItem.setText("Source directories...");
        sourceMenuItem.setToolTipText("Modify the paths where source files can be found.");
        sourceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(sourceMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Terminate the application.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.setToolTipText("Beta version - not yet implemented.");
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        diagramMenu.setText("Diagram");
        diagramMenu.setToolTipText("Create a new diagram or open a saved diagram.");
        newDiagram.setText("New diagram from an object");
        newDiagram.setToolTipText("Create a new diagram, starting with any known Java object.");
        newDiagram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDiagramActionPerformed(evt);
            }
        });

        diagramMenu.add(newDiagram);

        openDiagram.setText("Open a diagram");
        openDiagram.setToolTipText("Open a previously saved diagram.");
        openDiagram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDiagramActionPerformed(evt);
            }
        });

        diagramMenu.add(openDiagram);

        menuBar.add(diagramMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents
    
    private void openDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDiagramActionPerformed
        try {
            DUDiagram dia = Project.getInstance().openDiagram();
            if (dia != null) {
                umlFrame = new ShowUMLFrame(dia);
                umlFrame.setClosable(true);
                umlFrame.setIconifiable(true);
                umlFrame.setMaximizable(true);
                umlFrame.setResizable(true);
                umlFrame.setVisible(true);
                Dimension dim = desktopPane.getSize();
                umlFrame.setBounds(0, 0, dim.width / 2, dim.height);
                desktopPane.add(umlFrame, JLayeredPane.DEFAULT_LAYER);
                umlFrame.makeImage();
                umlFrame.openEditFrame();
            }
        }
        catch (Exception huh) {
            huh.printStackTrace();
        }
    }//GEN-LAST:event_openDiagramActionPerformed
    
    private void newDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDiagramActionPerformed
        try {
            DUObject ob = SelectObjectDialog.getSelObject(this);
            if (ob != null) {
                umlFrame = new ShowUMLFrame(new DefaultDiagram(ob));
                umlFrame.setClosable(true);
                umlFrame.setIconifiable(true);
                umlFrame.setMaximizable(true);
                umlFrame.setResizable(true);
                umlFrame.setVisible(true);
                Dimension dim = desktopPane.getSize();
                umlFrame.setBounds(0, 0, dim.width / 2, dim.height);
                desktopPane.add(umlFrame, JLayeredPane.DEFAULT_LAYER);
                umlFrame.makeImage();
                umlFrame.openEditFrame();
            }
        }
        catch (Exception huh) {
            huh.printStackTrace();
        }
    }//GEN-LAST:event_newDiagramActionPerformed
    
    private void sourceMenuItemActionPerformed(java.awt.event.ActionEvent evt)
    { //GEN-FIRST:event_sourceMenuItemActionPerformed
        JDialog jd = new SourceDirectories(this, true);
        jd.show();
        jd.dispose();
    } //GEN-LAST:event_sourceMenuItemActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt)
    { //GEN-FIRST:event_openMenuItemActionPerformed
        Project.close();
        JFileChooser fc = new JFileChooser(System.getProperty("user.home"));
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Project.open(fc.getSelectedFile().getAbsolutePath());
            swProp.setProperty("most.recent.project", fc.getSelectedFile().getAbsolutePath());
            sourceMenuItemActionPerformed(null);
            new SourceScannerDialog(this, true).show();
            setTitle(Project.getInstance().propFile.getAbsolutePath());
        } else {
            System.exit(0);
        }
    } //GEN-LAST:event_openMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)
    { //GEN-FIRST:event_exitMenuItemActionPerformed
        exitForm(null);
    } //GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt)
    { //GEN-FIRST:event_exitForm
        swProp.rememberLocationAndSize(this);
        System.exit(0);
    } //GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        File f = new File("umldot.properties");
        if (f.exists()) {
            int ask = JOptionPane.showConfirmDialog(null, "BETA VERSION!\nReset 'umldot.properties'?");
            switch (ask) {
                case JOptionPane.YES_OPTION :
                    f.delete();
                    break;
                case JOptionPane.CANCEL_OPTION :
                    System.exit(0);
                    break;
            }
        }
        new UMLDot().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu diagramMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newDiagram;
    private javax.swing.JMenuItem openDiagram;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem sourceMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
