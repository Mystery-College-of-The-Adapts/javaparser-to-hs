/* Part of UML/Dot, a program to generate UML class diagrams from Java source.
 * Copyright (C) 2003 Walter Stroebel
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
package net.sf.umldot.ui;

import java.lang.reflect.Modifier;
import java.util.Enumeration;
import java.util.Iterator;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import net.sf.umldot.*;


/**
 *
 * @author  walter
 */
public class ClassEditFrame extends JInternalFrame {
    private DUElement root;
    /** The selected element */
    private DUElement elm;
    private ShowUMLFrame frm;
    
    /** Creates new form ClassEditFrame */
    public ClassEditFrame(ShowUMLFrame frm) {
        this.frm = frm;
        this.root = frm.diagram.getRoot();
        elm = root;
        initComponents();
    }
    public String modifiers(DUElement elm) {
        return Modifier.toString(elm.getModifiers());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new JTree (root);
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        cbDrawEna = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        addRelButt = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        showMenu = new javax.swing.JMenu();
        showFieldsMenuItem = new javax.swing.JMenuItem();
        showMethodsMenuItem = new javax.swing.JMenuItem();
        showAllInheritanceMenuItem = new javax.swing.JMenuItem();
        hideMenu = new javax.swing.JMenu();
        hideFieldsMenuItem = new javax.swing.JMenuItem();
        hideMethodsMenuItem = new javax.swing.JMenuItem();
        insertMenu = new javax.swing.JMenu();
        insertObjectMenuItem = new javax.swing.JMenuItem();
        insertRelationMenuItem = new javax.swing.JMenuItem();
        editRelationMenuItem = new javax.swing.JMenuItem();

        setTitle("Object editor");
        jSplitPane1.setOneTouchExpandable(true);
        jPanel6.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(120, 120));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jTree1);

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel6);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText(elm.toString ());
        jPanel1.add(jLabel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTextArea1.setEditable(false);
        jTextArea1.setRows(10);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.BorderLayout());

        cbDrawEna.setSelected(elm.isDrawingEnabled (frm.diagram));
        cbDrawEna.setText("Drawing enabled");
        cbDrawEna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDrawEnaActionPerformed(evt);
            }
        });

        jPanel4.add(cbDrawEna, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });

        jScrollPane3.setViewportView(jList1);

        jPanel3.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        addRelButt.setText("<= Add relation to the diagram");
        addRelButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRelButtActionPerformed(evt);
            }
        });

        jPanel3.add(addRelButt, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        showMenu.setText("Show");
        showFieldsMenuItem.setText("Show fields");
        showFieldsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFieldsMenuItemActionPerformed(evt);
            }
        });

        showMenu.add(showFieldsMenuItem);

        showMethodsMenuItem.setText("Show methods");
        showMethodsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMethodsMenuItemActionPerformed(evt);
            }
        });

        showMenu.add(showMethodsMenuItem);

        showAllInheritanceMenuItem.setText("Show all inheritance");
        showAllInheritanceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllInheritanceMenuItemActionPerformed(evt);
            }
        });

        showMenu.add(showAllInheritanceMenuItem);

        jMenuBar1.add(showMenu);

        hideMenu.setText("Hide");
        hideFieldsMenuItem.setText("Hide fields");
        hideFieldsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideFieldsMenuItemActionPerformed(evt);
            }
        });

        hideMenu.add(hideFieldsMenuItem);

        hideMethodsMenuItem.setText("Hide methods");
        hideMethodsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideMethodsMenuItemActionPerformed(evt);
            }
        });

        hideMenu.add(hideMethodsMenuItem);

        jMenuBar1.add(hideMenu);

        insertMenu.setText("Elements");
        insertObjectMenuItem.setText("Add an object");
        insertObjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertObjectMenuItemActionPerformed(evt);
            }
        });

        insertMenu.add(insertObjectMenuItem);

        insertRelationMenuItem.setText("Add a relation");
        insertRelationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertRelationMenuItemActionPerformed(evt);
            }
        });

        insertMenu.add(insertRelationMenuItem);

        editRelationMenuItem.setText("Edit selected relation");
        editRelationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRelationMenuItemActionPerformed(evt);
            }
        });

        insertMenu.add(editRelationMenuItem);

        jMenuBar1.add(insertMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents
    
    private void editRelationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRelationMenuItemActionPerformed
        if (elm instanceof DURelation) {
            frm.diagram.remove((DURelation) elm);
            EditRelation eRel = new EditRelation(null, true, (DURelation) elm);
            while (true) {
                eRel.show();
                if (eRel.getReturnStatus() == EditRelation.RET_OK) {
                    if (!frm.diagram.add((DURelation) elm)) {
                        JOptionPane.showMessageDialog(this, "That relation could not be added to the diagram.", "Attempt to add a duplicate relation",JOptionPane.ERROR_MESSAGE);
                    } else {
                        updateTree();
                        updateAllFields();
                        break;
                    }
                } else {
                    break;
                }
            }
            eRel.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Please select the relation to edit in the element tree");
        }
    }//GEN-LAST:event_editRelationMenuItemActionPerformed
    
    private int limit = 0;
    
    private void addGeneralizations(DUObject ob) {
        if (limit < 1) return;
        if (ob.getSuperClass() != null) {
            if (frm.diagram.newRelation(ob.getName(), DURelation.RELTYPE_EXTENDS, ob, ob.getSuperClass())) {
                limit --;
            }
            addGeneralizations(ob.getSuperClass());
        }
        Iterator iter = ob.getInterfaces().iterator();
        while (limit > 0 && iter.hasNext()) {
            DUObject ob2 = (DUObject) iter.next();
            if (frm.diagram.newRelation(ob.getName(), DURelation.RELTYPE_IMPLEMENTS, ob, ob2)) {
                limit --;
            }
            addGeneralizations(ob2);
        }
    }
    
    private void addSpecializations(DUObject ob) {
        if (limit < 1) return;
        Iterator objs = Project.getInstance().allObjects.values().iterator();
        while (limit > 0 && objs.hasNext()) {
            DUObject ob2 = (DUObject) objs.next();
            if (ob2.getSuperClass() != null &&
            ob2.getSuperClass().getTypeFullName().equals(ob.getTypeFullName())) {
                addGeneralizations(ob2);
            }
            Iterator iter = ob2.getInterfaces().iterator();
            while (limit > 0 && iter.hasNext()) {
                DUObject ob3 = (DUObject) iter.next();
                if (ob3.getTypeFullName().equals(ob.getTypeFullName())) {
                    //System.out.println(ob2.getTypeFullName()+"->"+ob3.getTypeFullName()+"=="+ob.getTypeFullName());
                    addGeneralizations(ob2);
                //} else if (ob2.getTypeFullName().startsWith("java.util.")) {
                    //System.out.println(ob2.getTypeFullName()+"->"+ob3.getTypeFullName()+"!="+ob.getTypeFullName());
                }
            }
            
        }
    }
    
    private void updateTree() {
        jTree1 = new JTree(root);
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);
        elm = root;
    }
    
    private void showAllInheritanceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllInheritanceMenuItemActionPerformed
        if (elm instanceof DUObject) {
            limit = 20;
            addGeneralizations((DUObject) elm);
            addSpecializations((DUObject) elm);
            updateTree();
            updateAllFields();
        }
        
    }//GEN-LAST:event_showAllInheritanceMenuItemActionPerformed
    
    private void insertRelationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertRelationMenuItemActionPerformed
        DURelation rel = new DURelation(frm.diagram.getRoot(), "*new*", DURelation.RELTYPE_GENERIC, null, null);
        EditRelation eRel = new EditRelation(null, true, rel);
        while (true) {
            eRel.show();
            if (eRel.getReturnStatus() == EditRelation.RET_OK) {
                if (!frm.diagram.add(rel)) {
                    JOptionPane.showMessageDialog(this, "That relation could not be added to the diagram.", "Attempt to add a duplicate relation",JOptionPane.ERROR_MESSAGE);
                } else {
                    updateTree();
                    updateAllFields();
                    break;
                }
            } else break;
        }
        eRel.dispose();
    }//GEN-LAST:event_insertRelationMenuItemActionPerformed
    
    private void insertObjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertObjectMenuItemActionPerformed
        DUObject ob2 = SelectObjectDialog.getSelObject(null);
        if (ob2 != null) {
            frm.diagram.add(ob2);
            updateTree();
            updateAllFields();
        }
    }//GEN-LAST:event_insertObjectMenuItemActionPerformed
    
    private void hideMethodsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideMethodsMenuItemActionPerformed
        Enumeration e = elm.children();
        while (e.hasMoreElements()) {
            DUElement n = (DUElement) e.nextElement();
            if (n instanceof DUMethod) {
                n.setDrawingEnabled(frm.diagram,false);
            }
        }
        updateAllFields();
    }//GEN-LAST:event_hideMethodsMenuItemActionPerformed
    
    private void hideFieldsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideFieldsMenuItemActionPerformed
        if (elm instanceof DUObject) {
            Enumeration e = elm.children();
            while (e.hasMoreElements()) {
                DUElement n = (DUElement) e.nextElement();
                if (n instanceof DUVariable) {
                    n.setDrawingEnabled(frm.diagram,false);
                }
            }
            updateAllFields();
        }
    }//GEN-LAST:event_hideFieldsMenuItemActionPerformed
    
    private void showMethodsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMethodsMenuItemActionPerformed
        Enumeration e = elm.children();
        while (e.hasMoreElements()) {
            DUElement n = (DUElement) e.nextElement();
            if (n instanceof DUMethod) {
                n.setDrawingEnabled(frm.diagram,true);
            }
        }
        updateAllFields();
    }//GEN-LAST:event_showMethodsMenuItemActionPerformed
    
    private void showFieldsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFieldsMenuItemActionPerformed
        if (elm instanceof DUObject) {
            Enumeration e = elm.children();
            while (e.hasMoreElements()) {
                DUElement n = (DUElement) e.nextElement();
                if (n instanceof DUVariable) {
                    n.setDrawingEnabled(frm.diagram,true);
                }
            }
            updateAllFields();
        }
    }//GEN-LAST:event_showFieldsMenuItemActionPerformed
    
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        addRelButt.setEnabled(true);
    }//GEN-LAST:event_jList1ValueChanged
    
    private void addRelButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRelButtActionPerformed
        try {
            DURelation rel = (DURelation) jList1.getSelectedValue();
            rel.setParentElement(frm.diagram.getRoot());
            if (!frm.diagram.add(rel)) {
                JOptionPane.showMessageDialog(this, "That relation could not be added to the diagram.", "Attempt to add a duplicate relation",JOptionPane.ERROR_MESSAGE);
            } else {
                updateTree();
                updateAllFields();
            }
        } catch (Exception ignore) {
            ignore.printStackTrace();
        }
    }//GEN-LAST:event_addRelButtActionPerformed
    
    private void cbDrawEnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDrawEnaActionPerformed
        elm.setDrawingEnabled(frm.diagram, cbDrawEna.isSelected());
        updateAllFields();
    }//GEN-LAST:event_cbDrawEnaActionPerformed
    
    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        try {
            DUElement tmp = (DUElement) jTree1.getLastSelectedPathComponent();
            if (tmp != null) {
                elm = tmp;
            } else {
                elm = root;
            }
            updateAllFields();
        } catch (Exception ignore) {
            ignore.printStackTrace();
        }
    }//GEN-LAST:event_jTree1ValueChanged
    
    private void updateAllFields() {
        try {
            addRelButt.setEnabled(false);
            jLabel1.setText(elm.toString());
            jTextArea1.setText(elm.getDocumentation());
            jTextArea1.setRows(10);
            jTextArea1.setCaretPosition(0);
            cbDrawEna.setSelected(elm.isDrawingEnabled(frm.diagram));
            if (elm instanceof DUObject) {
                DUObject ob = (DUObject) elm;
                DiagramElementCollection col = new DiagramElementCollection("Relations");
                ob.getPossibleRelations(col);
                jList1 = new JList(col.getChildren());
                jList1.addListSelectionListener(new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent evt) {
                        jList1ValueChanged(evt);
                    }
                });
            } else {
                jList1 = new JList(new String [] { "(not an object)" });
            }
            jScrollPane3.setViewportView(jList1);
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    try {
                        frm.makeImage();
                    } catch (Exception ignore) {
                        ignore.printStackTrace();
                    }
                }
            });
        } catch (Exception ignore) {
            ignore.printStackTrace();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRelButt;
    private javax.swing.JCheckBox cbDrawEna;
    private javax.swing.JMenuItem editRelationMenuItem;
    private javax.swing.JMenuItem hideFieldsMenuItem;
    private javax.swing.JMenu hideMenu;
    private javax.swing.JMenuItem hideMethodsMenuItem;
    private javax.swing.JMenu insertMenu;
    private javax.swing.JMenuItem insertObjectMenuItem;
    private javax.swing.JMenuItem insertRelationMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem showAllInheritanceMenuItem;
    private javax.swing.JMenuItem showFieldsMenuItem;
    private javax.swing.JMenu showMenu;
    private javax.swing.JMenuItem showMethodsMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
